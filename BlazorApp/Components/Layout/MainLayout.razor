@inherits LayoutComponentBase
@inject ProtectedSessionStorage sessionStorage
@inject NavigationManager navigationManager

<MudThemeProvider />
<MudPopoverProvider />
<MudDialogProvider />
<MudSnackbarProvider />

<MudLayout>
    <MudAppBar>

        @if (!string.IsNullOrEmpty(username))
        {
            <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="@OnDrawerToggle" />
        }

        My Application

        <MudSpacer></MudSpacer>

        @if (!string.IsNullOrEmpty(username))
        {
            <MudButton OnClick="@Logout" Variant="@Variant.Filled" Color="@Color.Tertiary">Logout</MudButton>
        }
        
    </MudAppBar>
    <MudDrawer @bind-Open="@isDrawerOpened">
        <MudNavMenu>
            <MudText Typo="Typo.h6" Class="px-4">My Application</MudText>
            <MudDivider Class="my-2"></MudDivider>
            <MudNavLink Href="/">Home</MudNavLink>
            <MudNavGroup Title="Master" Expanded="true">
                <MudNavLink Href="/AccountInfoView">User Account</MudNavLink>
                <MudNavLink Href="/UserLevelRightView">User Level Right</MudNavLink>
            </MudNavGroup>
            <MudNavGroup Title="My Profile" Expanded="true">
            </MudNavGroup>
        </MudNavMenu>
    </MudDrawer>
    <MudMainContent>
        @Body
    </MudMainContent>
</MudLayout>

<div id="blazor-error-ui" data-nosnippet>
    An unhandled error has occurred.
    <a href="." class="reload">Reload</a>
    <span class="dismiss">🗙</span>
</div>

@code {
    public bool isDrawerOpened { get; set; } = true;    

    public void OnDrawerToggle()
    {
        isDrawerOpened = !isDrawerOpened;
    }

    private string username = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        var sessionData = await sessionStorage.GetAsync<string>("username");

        if (sessionData.Success && !string.IsNullOrEmpty(sessionData.Value))
        {
            username = sessionData.Value;
        }

        if (string.IsNullOrEmpty(username))
        {
            isDrawerOpened = false;
        }

        await InvokeAsync(() => StateHasChanged());
    }   

    private async Task Logout()
    {
        await sessionStorage.DeleteAsync("username");
        navigationManager.NavigateTo("/Login", forceLoad: true);
    }
}